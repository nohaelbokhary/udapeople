version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.0
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli
commands:
  install_ansible:
    description: installing ansible
    steps: 
       - run:
           name: installing ansible
           command: |
                sudo apt update -y
                sudo apt install software-properties-common
                sudo add-apt-repository --yes --update ppa:ansible/ansible
                sudo apt install ansible -y

  install_nodejs:
    description: installing ansible node js
    steps: 
       - run:
           name: installing ansnode ible node js
           command: |
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs


  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          when: on_fail
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: on_fail

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      Workflow_ID:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            echo $SUCCESS
            if (("$SUCCESS" == 1));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail





jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build2
      - slack/notify:
              event: fail
              template: basic_fail_1    


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
              event: fail
              template: basic_fail_1    

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build2
      - run:
          name: fronted test
          command: |
            cd frontend
            npm run test
      - slack/notify:
              event: fail
              template: basic_fail_1      
      
# npm install oauth-sign
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: backend test
          command: |
            cd backend
            npm run test
      - slack/notify:
             event: fail
             template: basic_fail_1      

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build2
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install --package-lock-only
            npm audit fix --audit-level=critical 
      - slack/notify:
             event: fail
             template: basic_fail_1       
      

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build2
      - run:
          name: backend scan
          command: |
            cd backend
            npm install --package-lock-only
            npm audit fix --audit-level=critical 
      - slack/notify:
             event: fail
             template: basic_fail_1      
             
             
  deploy-infrastructure:
    docker:

       - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
       
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
              
      - persist_to_workspace:
                    root: ~/
                    paths:
                      - project/.circleci/ansible/inventory.txt
      - destroy_environment:
                    id: ${CIRCLE_WORKFLOW_ID:0:7}
                    when: on_fail

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["c3:38:9f:32:3a:b3:c8:62:89:b2:c8:e5:e9:13:40:18"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
       - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: run migrations
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
      - run:
          name: send migration status to kvdb
          command: |
               if gerp -q "has been executed successfully." ~project/backend/migrations_dump.txt
               then
                   curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
               fi

      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
           Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
           when: on_fail              

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - install_nodejs
    
      - restore_cache:
          keys: [frontend-build]
              
      - run:
          name: Install dependencies
          command: |
             cd frontend
             npm install
                          

      - run:
        name: get  backend  Url
        working_directory: ./frontend
        command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo $API_URL
    - run:
        name: Deploy frontend objects to S3
    
        command: |
           cd frontend
           npm run build
           aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
    
     - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
           Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
           when: on_fail      
    
                 
                    
 

 


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]   
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]    
            
